#version 310 es

layout(local_size_x = 32, local_size_y = 32) in;
layout(std430) buffer;

uniform ivec2 dimensions;
uniform uint boundary_size;
uniform sampler2D trimap;

layout(binding = 1) readonly buffer BackgroundBoundary {
    ivec2 data[];
} backgroundBoundary;

layout(binding = 2) readonly buffer ForegroundBoundary {
    ivec2 data[];
} foregroundBoundary;

struct Sample
{
    int foreground_index, background_index;
    float distance2foreground, distance2background;
    float cost, alpha;
};

layout(binding = 4) writeonly buffer Samples {
    Sample data[];
} samples;

float rand(vec2 co) {
    float a = 12.9898;
    float b = 78.233;
    float c = 43758.5453;
    float dt= dot(co.xy ,vec2(a,b));
    float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

float nearestDistance(bool use_foreground, ivec2 point) {
    // FLT_MAX      = 3.402823e+38
    int minDistSqr = dimensions.x * dimensions.y;
    for (uint i = uint(0); i < boundary_size; ++i) {
        ivec2 boundary_coord = use_foreground ? foregroundBoundary.data[i] : backgroundBoundary.data[i];
        ivec2 delta = boundary_coord - point;
        int dist_to_boundary = delta.x * delta.x + delta.y * delta.y;

        min(minDistSqr, max(dist_to_boundary, int(1)));
    }

    return sqrt(float(minDistSqr));
}

void main(){
    // rgba
    uvec4 TRIMAP_UNKNOWN = uvec4(0x00, 0x00, 0x00, 0x00);

    int x = int(gl_GlobalInvocationID.x);
    int y = int(gl_GlobalInvocationID.y);

    if(x >= dimensions.x || y >= dimensions.y)
        return;

    vec2 tex_coord = vec2(float(x) / float(dimensions.x), float(y) / float(dimensions.y));
    uvec4 trimap_pixel = uvec4(texture(trimap, tex_coord) * 255.0);

    if(trimap_pixel != TRIMAP_UNKNOWN)
        return;

    // FLT_MAX      = 3.402823e+38
    Sample _sample = Sample(
        int(floor(rand(vec2(gl_GlobalInvocationID) * 13.0) * float(boundary_size-uint(1))/**/)),
        int(floor(rand(vec2(gl_GlobalInvocationID) * 17.0) * float(boundary_size-uint(1))/**/)),
        0.0, 0.0,
        3.402823e+38, 0.0);

    _sample.distance2background = /*/1.0;/**//**/nearestDistance(false, ivec2(x, y))/**/;
    _sample.distance2foreground = /*/1.0;/**//**/nearestDistance(true, ivec2(x, y))/**/;

    samples.data[y*dimensions.x + x] = _sample;
}